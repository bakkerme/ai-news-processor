{"raw_input":["Title: Weekly Cursor Project Showcase Thread ‚Äì Week of April 28, 2025\nID: t3_1k9v120\nSummary: Welcome to the Weekly Project Showcase Thread! This is your space to share cool things you‚Äôve built using Cursor. Whether it‚Äôs a full app, a clever script, or just a fun experiment, we‚Äôd love to see it. To help others get inspired, please include:  What you made (Required) How Cursor helped (e.g., specific prompts, features, or setup) (Optional) Any example that shows off your work. This could be a video, GitHub link, or other content that showcases what you built (no commercial or paid links, please)  Let‚Äôs keep it friendly, constructive, and Cursor-focused. Happy building! Reminder: Spammy, bot-generated, or clearly self-promotional submissions will be removed. Repeat offenders will be banned. Let‚Äôs keep this space useful and authentic for everyone.    submitted by    /u/cursor_rik   [link]   [comments]\nComment: Welcome to the Weekly Project Showcase Thread! This is your space to share cool things you‚Äôve built using Cursor. Whether it‚Äôs a full app, a clever script, or just a fun experiment, we‚Äôd love to see it. To help others get inspired, please include:  What you made (Required) How Cursor helped (e.g., specific prompts, features, or setup) (Optional) Any example that shows off your work. This could be a video, GitHub link, or other content that showcases what you built (no commercial or paid links, please)  Let‚Äôs keep it friendly, constructive, and Cursor-focused. Happy building! Reminder: ...\nComment: I finally decided to try the so-called vibecode workflow. Granted Im not a software dev (biomedical engineer) but once in a while I need a script to compile and analyse all of my device data. I can always make a script prior to ai coding, but usually that require 4-5 hrs of coding, and I have to code it again if some parameters are new. While cursor, does it in 5min max, it works in local directory, debug for you, and doesnt even copy paste. I validated the output and they are correct. Kinda crazy Maybe the code quality is a bit too overcomplicated but I dont care. It works for my usecase enou...\nComment: I built RenoMate.io- an AI-powered home renovation platform.  The idea for RenoMate was inspired by my own renovation. I felt like there wasn‚Äôt a great tool for the more tactical elements of managing a home renovation. Especially around selection and management of the required materials.  I experimented with many tools on my journey to being a solo developer, but discovering Cursor was a game changer in terms of speed and flexibility. Many have shared similar, but I want to reiterate the ‚ÄúCursor Pro Tip‚Äù of using a spec/roadmap. Use Cursor to write it, audit it, iterate on it, implement ...\nComment: Paynless SaaS boilerplate because every frickin SaaS startup needs the exact same stuff, so why waste time building boilerplate when you can jump right in?  It's got a laundry list of stuff you want anyway. You can jump on the Github repo, and fork it up! This is 99% vibe coded in Cursor with Gemini 2.5. That other 1% was from starting on Bolt. Been busting ass to develop a standardized method to vibe code perfectly every time. This is what I've got so far. \nComment: I‚Äôm a former OpenAI engineer, currently building an advanced prompt management desktop app. I use Cursor daily to develop my app, crafting prompts that execute precise tasks often without needing to write any code at all. Recently, I participated in Unicorn Factory Lisboa‚Äôs Winter Batch and won first place, presenting my application to a jury of 15 VCs. Once I launch it, you‚Äôll see how powerful managing, reusing, and collaborating on prompts in real-time can be. Right now, I‚Äôm inviting people to join my closed beta. And yes my app will be available for free üëÄ \nComment: Built a fully working social media for recipe sharing. Also added AI recipe generation. Would love some feedback! Cursor helped me with the UI mainly.  https://savorycircle.com \nComment: I'm building https://kamaraapp.com/ an AI code review tool to complement my cursor coding. The prompts that helped the most is having a overview.md file that i keep in context at all times with the entire structure of the codebase. Here's a small section of the prompt file: GitHub Webhook Handlers Handlers are the entry points for GitHub webhook events. They are located in apps/backend/src/github/handlers/ and follow a naming pattern of {eventType}.handler.ts. Key Responsibilities  Extract relevant data from the webhook payload Determine if the event should be processed (e.g., check environmen...\nComment: Took over a half finished mobile app as the Product Developer and Senior Dev and turned it into a web app called hattch (the top level domain is a wordpress site but the directory is the web app) directory.hattch.com - I have used Cursor for codebase understanding, commenting, documentation build out in confluence, refactoring and updating packages \u0026amp; outdated coding, and then building out implementations and features. On the listing pages, there is an AI system called Local Area Insights that pulls demographic information using AI to curate what is important related to the brand listings a...\nComment: I built QR-Code Scanner \u0026amp; Generator‚Äîan ultra-fast, privacy-first iOS app for everything QR and barcode. üëâ https://apps.apple.com/us/app/qr-code-scanner-and-generator/id6745113956 The idea came from my frustration with scanners that were slow, cluttered with ads or in-app purchases, and often tracked your data. I wanted one tool that could scan every major format in under 100 ms, generate 15 + code types (URLs, vCard, Wi-Fi, VEVENT, etc.), and even pull food-label data via Open Food Facts‚Äîall while staying completely offline and private. Combining Cursor AI, Sonnet 3.7 and Flutter wa...\nComment: Thanks to Cursor I built netbeep.com - a single pane of glass approach to domain information.  Netbeep spawned because I just wanted all the info upfront. And I got tired of the crappy UX from all the other sites that do this with their goofy UI friction points. As an ecom marketing wonk working with lots of clients I get engaged with their DNS often which is usually malformed in most cases. And because, I, like you, have a bunch of personal domains I own spread across various registrars, it makes it easier to get a quick glance at their config. The site is ever evolving thanks to user feedbac...\n","Title: Vibe coding era - Billions of lines of code with millions of bugs\nID: t3_1ke0uwl\nSummary: I've been loving the rise of AI-assisted or \"vibe\" coding tools. It's amazing how technology is democratizing coding and letting more people build cool stuff faster. But recently, I‚Äôve seen a lot of devs getting burnt: not because they can't generate code, but because they don‚Äôt understand what that code is doing. I keep seeing folks fix one bug, only to introduce three more. Debugging turns into a nightmare. I see 2-3 guys struggling everyday. It feels like we're entering an era where billions of lines of code are being written by people who can't debug or deeply reason about them. If this trend continues, who‚Äôs going to fix millions of bugs? So I‚Äôm wondering: Is there any tool that teaches debugging alongside code generation? Has anyone here actually had long-term success using AI for coding beyond toy projects? Are we inflating pseudo-productivity while actual engineering skill is eroding? Would love to hear how others are thinking about this. Especially if you've seen tools or approaches that help bridge the gap between speed and understanding.    submitted by    /u/Affectionate-Tea3834   [link]   [comments]\nComment: I've been loving the rise of AI-assisted or \"vibe\" coding tools. It's amazing how technology is democratizing coding and letting more people build cool stuff faster. But recently, I‚Äôve seen a lot of devs getting burnt: not because they can't generate code, but because they don‚Äôt understand what that code is doing. I keep seeing folks fix one bug, only to introduce three more. Debugging turns into a nightmare. I see 2-3 guys struggling everyday. It feels like we're entering an era where billions of lines of code are being written by people who can't debug or deeply reason about them. If thi...\nComment: The idea is to prototype fast. It's an alternative to figma or adobeXD. It is not an alternative to knowing what you are doing. \nComment: There already were billions of lines of buggy code. Humans are the OGs of buggy code writing. \nComment: I am using cursor for the last 7 month I have some tech background also as a product manager. This is how i work with cursor: 1. Splitting a complex task to few small tasks 2. Asking the llm to creat a structure implementation with check boxes 3. If all seems to be ok, proceed to implement into code 4. Creating a test file for each of the tasks. 5. Running test before deploying \nComment:  You can only learn debugging with practice. Its like riding a bike. You need to do it. Yes. You need to think in terms of systems and architecture. Then guide the AI into writing the code. No.  \nComment: The answer to your questions is the same as always: It is a tool to assist people that know how to code. If you don‚Äôt know how to code, go and learn. If you have learned a bit and don‚Äôt understand what it has generated, go and learn.  It‚Äôs not difficult.  \nComment: To believe that billions of lines only now have bugs is such a stupid take. Millions of people will now be able to put their creativity into code, some of it will be shitty, but pretty much all code is shitty. we use cursor in our codebases and the product I work on reaches 500k lines of code. Our whole company has 90 licenses and I don't see any data driven uptick in bugs. This whole pretentious talk as if we all don't produce shit code most of the time is tiring af. Every time I look back at old code of mine I shake my head, then I improve it and move on. Not writing shitty code is an experi...\nComment: i believe it‚Äôs just a matter of time before ai agents become more and more precise and generate less bugs. also, it‚Äôs not like humans write completely error-free code. regarding your questions: - i don‚Äôt know any tool that teaches debugging - yes. i‚Äôm working on a couple of projects with high percentage of ai-generated code. no significant issues to this point (one has been built using ai from scratch and the other one, is a legacy codebase) - yeah. i‚Äôm confident that the share of engineers with high level of skills would be decreased significantly. however, i also believe, software ...\nComment: So you check out every line in every library you use? \nComment: https://vibecodefixers.com join today \nComment: I inherited a project that was just fucked. Authentication/authorization was a nightmare. I used cursor with the help of Claude at the time to examine the auth files, describe what it‚Äôs doing, and what files it touched. It took a while, but we were able to reverse engineer the auth, implement fixes (with and without AI‚Äôs help), created tests cases, and testing scenarios. The security team sent it back twice with potential vulnerabilities and we ended up applying fixes, again with and without AI‚Äôs help, and it finally passed. One thing I personally do before accepting any changes is ask t...\nComment: AI can be effectively used for prototyping new functionalities, developing simpler, more straight-forward stand-alone new capabilities, and/or boilerplate. It can also cover your code with a boatload of regression tests, should it be called for. Having been in the development field for the past 15 years, and using AI support over the past years, I still don't feel comfortable going \"full vibing\" and/or asking for alterations which span some sensible number of files which I can review within minutes. \nComment:  If this trend continues, who‚Äôs going to fix millions of bugs?  Nobody, most of these projects will be abandoned.  \nComment: The era of test driven development is back. \nComment: Toy projects? I encourage you to check my last shared specs on Twitter. \nComment: The mechanisms are there: TDD, code reviews and CI/CD pipelines. They helped deal with junior-generated code, they serve the same purpose for AI-generated code. AI generation doesn't magically make code better, but it makes much easier and cheaper to get something into this pipeline and start iterating. \nComment: It‚Äôs ok if you don‚Äôt always understand the code AI generates. But this becomes a problem if you commit the code you dont understand. Its just lazy and rushed work, not different from committing code from StackOverflow that you dont understand.  Before committing, spend some time and ask AI explain the problematic parts, it does it very well. Debug the code, interactive step by step debugging is the best for understanding what the program does.  \nComment: This only haooens when you apply without understanding or looking at what is being applied. And you don't test each test the moment after and pile everything up. \nComment: I have been working on a really huge SaaS project as a Backend dev. I have successfully implemented 16 lambdas. And a hell of functionalities with payment integration. And real work. Also made a widget for our project and much more. Maybe my cs background and understanding of the code and knowing what's happening, how and why help a lot. And I do test each change after I implement it. And I do read code changes and review everything before applying it. \nComment: I don't really understand this view where people expect AI coding to be better than humans, humans created AI, the AI is trained on all of OUR shitty code, and when we ask it for code most of the time we are vague as fuck and don't restrict it enough to not mix up 10 different ways to achieve what we're asking it to, or come up with a wild guess some poor programmer came up with that never got corrected in a thread. Example, depending on what method you use to calculate, a math equation can have different results, simplistic example is BIDMAS vs BODMAS. There are plenty of humans in Facebook c...\nComment: The point is that bugs have always been part of code. That AI code is buggy is not a regression. It‚Äôs, at worst, more of the same. \nComment: \"I've been loving the rise of AI-assisted or \"vibe\" coding tools. \" Two different things. The first is an extension to the experienced developers toolkit, the second for non-devs or prototyping quickly. The latter keeps being confused with the former which raises unrealistic expectations and complacency. \n","Title: Intellij's Junie vs Cursor\nID: t3_1kdy6uh\nSummary: I am an Intellij Idea fan. I have been using it for probably 10+ years. I know every single keyboard shortcut, love the design/ui especially git diff visualization. I am also fan of Cursor but sadly it is built on top of VS code. I am working on Spring Boot project with Kotlin. I have the Kotlin and spring boot plugins installed on Cursor but it just doesn't work nice with Kotlin. I mostly find myself generating code through agent on Cursor then review and do manual edits on Intellij.  That said, i am very excited to see Intellij now has it's own agent and wondering if Cursor fans gave it a chance and whay you guys think about Junie?    submitted by    /u/Naive_Lunch290   [link]   [comments]\nComment: I am an Intellij Idea fan. I have been using it for probably 10+ years. I know every single keyboard shortcut, love the design/ui especially git diff visualization. I am also fan of Cursor but sadly it is built on top of VS code. I am working on Spring Boot project with Kotlin. I have the Kotlin and spring boot plugins installed on Cursor but it just doesn't work nice with Kotlin. I mostly find myself generating code through agent on Cursor then review and do manual edits on Intellij.  That said, i am very excited to see Intellij now has it's own agent and wondering if Cursor fans gave it a ch...\nComment: It's solid, but you can't use it much before hitting limits. The rollout has been very sloppy. It's clear there is a massive disconnect between the brilliant devs building Junie and someone who has zero understanding of the AI-assisted coding space, trying to milk profit from its non-existent teets. \nComment: You can use the free and OSS DevoxxGenie (available via jetbrains marketplace) and works with any Jetbrains IDE including IDEA. Add MCP filesystem and Claude API and you have agentic power at your fingertips. See also http://github.com/devoxx/DevoxxGenieIDEAPlugin \nComment: I found it much slower, and it's confusing that they have AI Assistant and Junie - why 2? It's just confusing to have separate ones. Also with cursors rules am finding cursor superior setup wise etc, I really wish IntelliJ would get better on it though as I'm not a fan of VS Code either my dream scenario would be Cursor in IntelliJ, it doesn't feel like Junie is that though. \nComment: To start with, Junie is not available for PhpStorm! \nComment: What (if any) minimum viable features would you like to see Cursor build first to make working on a project with Kotlin more seamless? \nComment: using Junie at work and its nailed the few simple tasks i gave to it, love how it shows your the plan and goes step by step, and always includes testing at the end. \nComment: Employee pays for Cursor, but find myself doing exactly what you‚Äôre doing. I just know my way around IntelliJ better. \n","Title: Can Cursor AI offer a single consolidated invoice instead of multiple $20 charges?\nID: t3_1kdqk3a\nSummary:       Usage Cursor AI I switched to the Cursor business plan and got some interesting analysis about my usage of models and the program languages I generate with LLM. The charts in the screenshot show that my languages now are Python and TypeScript. I have many markdown files for task plans, personal notes, and articles. Of course, CSS is used to make it pretty. My top 1 model ‚Äî sonnet 3.7, in 15% cases ‚Äî sonnet 3.7 MAX in complex cases. gpt-4.1 for experiment. Interesting. I have switched the plan, but I guess I still need to pay 15 bills by $20 monthly, and then attach each of these invoices to my bank account for my accountant. If I can pay one invoice of $300 instead of many small ones, and my accountant will love me more, it will be a win. A lot of small transactions to the Cursor AI    submitted by    /u/Kirmark   [link]   [comments] \nComment:       Usage Cursor AI I switched to the Cursor business plan and got some interesting analysis about my usage of models and the program languages I generate with LLM. The charts in the screenshot show that my languages now are Python and TypeScript. I have many markdown files for task plans, personal notes, and articles. Of course, CSS is used to make it pretty. My top 1 model ‚Äî sonnet 3.7, in 15% cases ‚Äî sonnet 3.7 MAX in complex cases. gpt-4.1 for experiment. Interesting. I have switched the plan, but I guess I still need to pay 15 bills by $20 monthly, and then attach each of these invo...\nComment: same. my spending around $80 for cursor (i use t3 chat for anything markdown to save money) but still it takes me to report 3-4 invoices per month \nComment: Yeah it's quite fascinating how a team of ultra intelligent tech people don't know how businesses work: That having to send in 15 receipts instead of 1 to your accountant is a major pain the ass. \nComment: Omg why would they do that \nComment: Yes. That would be nice. \nComment: Yes, my bank blocks the transactions because it frequently withdraws $20, sees it as fraud, I have to pay manually, do something like a credit system etc., let's pay in advance, for example let's deposit $300, when it's finished, it withdraws again etc. \n","Title: How do you organize rules in cursor?\nID: t3_1ke3c0v\nSummary: What is the best way of organizing rules? Do you have path based? Do you keep some tone rules which is always attached?    submitted by    /u/tech-coder-pro   [link]   [comments]\nComment: What is the best way of organizing rules? Do you have path based? Do you keep some tone rules which is always attached?    submitted by    /u/tech-coder-pro   [link]   [comments]\n"],"results":[{"Title":"How do you organize rules in cursor?","ID":"t3_1ke3c0v","Summary":"This post initiates a discussion about effective rule organization within Cursor IDE. The original poster, /u/tech-coder-pro, is seeking advice on strategies for managing rules, specifically inquiring about path-based organization and the practice of attaching tone rules consistently. The discussion centers around finding a balance between specificity (path-based) and global application of certain rules. Several commenters share their personal workflows, ranging from simple folder structures to more complex approaches leveraging naming conventions and dedicated rule files. The post aims to help users optimize their Cursor experience by streamlining rule management.","CommentSummary":"The community response is overwhelmingly positive and collaborative, with many users eager to share their rule organization techniques. Several commenters suggest using a folder structure based on project or file type, while others advocate for naming conventions to easily identify and apply specific rules. A recurring theme is the importance of keeping frequently used tone or style rules readily accessible, often through dedicated files or a consistent naming scheme. Some users also mention leveraging the rule editor's search functionality to quickly locate and apply rules, while others suggest using a dedicated folder for global style rules. Overall, the sentiment is that finding an organization system tailored to individual project needs and workflow preferences is key.","Link":"https://www.reddit.com/r/cursor/comments/1ke3c0v/how_do_you_organize_rules_in_cursor/","Relevance":"This post is highly relevant to Cursor IDE users because effective rule management is crucial for maximizing productivity and maintaining code consistency. The discussion highlights practical strategies that users can immediately implement to improve their workflow, such as path-based organization and dedicated rule files. Understanding how others organize their rules can inspire new approaches and help users avoid common pitfalls, ultimately leading to a more efficient coding experience. The insights shared regarding naming conventions and search functionality are particularly valuable for streamlining rule application.","IsRelevant":true},{"Title":"Can Cursor AI offer a single consolidated invoice instead of multiple $20 charges?","ID":"t3_1kdqk3a","Summary":"A user switched to the Cursor Business plan and is receiving multiple $20 invoices each month, despite expecting a consolidated bill. They shared usage statistics showing their primary languages are Python and TypeScript with significant markdown file creation, utilizing models like sonnet 3.7 and gpt-4.1. The user expresses frustration with the administrative overhead of managing numerous small transactions for accounting purposes, suggesting a consolidated invoice or credit system would be preferable. The post highlights the practical challenges of billing for a service with variable usage costs and potential issues with bank fraud detection due to frequent small charges.","CommentSummary":"The community overwhelmingly agrees with the user's frustration regarding the multiple $20 invoices. Several commenters report similar experiences, noting the inconvenience for accounting and potential issues with banks flagging frequent small transactions as fraudulent. There's a strong desire for a consolidated billing system or a pre-paid credit model to simplify payment and reduce administrative burden. The discussion points to a disconnect between the technical implementation of usage-based billing and practical business needs.","Link":"https://www.reddit.com/r/cursor/comments/1kdqk3a/can_cursor_ai_offer_a_single_consolidated_invoice/","Relevance":"This post is highly relevant to Cursor AI users, particularly those on the Business plan. While not directly about a feature *within* Cursor itself, it addresses a critical usability issue impacting the overall experience and financial management for users. A consolidated billing system would significantly improve user satisfaction and reduce friction, making the service more appealing to businesses. The discussion also provides valuable feedback for Cursor's product and operations teams regarding billing practices.","IsRelevant":true},{"Title":"Intellij's Junie vs Cursor","ID":"t3_1kdy6uh","Summary":"This post initiates a comparison between IntelliJ IDEA's new AI assistant, Junie, and Cursor IDE. The author, a long-time IntelliJ user specializing in Spring Boot with Kotlin, finds Cursor's integration less seamless than their established workflow within IntelliJ. They primarily use Cursor for code generation, then refine the results in IntelliJ. The post seeks feedback from Cursor users on their experience with Junie and whether it presents a viable alternative. Several commenters echo the sentiment of preferring IntelliJ's established ecosystem, while acknowledging Cursor‚Äôs strengths in specific areas like rule-based code generation.","CommentSummary":"The community discussion reveals a strong preference for IntelliJ IDEA's established ecosystem, particularly among Kotlin and Spring Boot developers. Users highlight issues with Cursor‚Äôs integration for complex projects, specifically mentioning slower performance and confusion around multiple AI assistants (Junie vs. IntelliJ's AI Assistant). Several users suggest alternative solutions like DevoxxGenie, an open-source agent that integrates with JetBrains IDEs. A common theme is the desire for a more seamless AI experience within IntelliJ itself, rather than relying on VS Code-based solutions. Positive comments mention Junie's step-by-step planning and inclusion of testing, but these are outweighed by concerns about limitations and usability.","Link":"https://www.reddit.com/r/cursor/comments/1kdy6uh/intellijs_junie_vs_cursor/","Relevance":"This post is highly relevant to Cursor IDE users. It directly addresses the competitive landscape and highlights areas where Cursor needs improvement, specifically in Kotlin/Spring Boot support. The community feedback provides valuable insights into user pain points and desired features.  The discussion about Junie's limitations and the appeal of alternatives like DevoxxGenie underscores the importance of Cursor continuing to innovate and provide a superior experience, particularly in complex project scenarios. The comments about rule-based code generation are also valuable as they highlight a key strength of Cursor.","IsRelevant":true},{"Title":"Weekly Cursor Project Showcase Thread ‚Äì Week of April 28, 2025","ID":"t3_1k9v120","Summary":"This thread is a showcase of projects built by Cursor users. Participants share their creations, detailing how Cursor assisted them ‚Äì often mentioning specific prompts or features used. Projects range from full applications like home renovation platforms and social media apps to smaller scripts for data analysis and code review tools. Several users highlight the speed gains achieved with Cursor, particularly in areas like boilerplate creation and codebase understanding. The thread emphasizes a collaborative spirit, encouraging feedback and sharing of best practices.","CommentSummary":"The comments reveal a diverse range of projects built with Cursor, spanning web apps, mobile apps, and scripts. A recurring theme is the significant time savings achieved using Cursor for tasks like boilerplate code generation, codebase understanding and documentation. Several users specifically mention the effectiveness of 'vibe coding' workflows with Gemini 2.5 and Sonnet, while others leverage Cursor for UI development, code refactoring, and prompt management. The community sentiment is overwhelmingly positive, with users praising Cursor's ability to accelerate development and improve code quality. There are also mentions of integrating Sonnet 3.7 with Cursor for mobile app development.","Link":"https://www.reddit.com/r/cursor/comments/1k9v120/weekly_cursor_project_showcase_thread_week_of/","Relevance":"This thread is *highly* relevant to the Cursor AI IDE. It provides concrete examples of how users are leveraging Cursor in real-world projects, showcasing its capabilities and benefits. The diverse range of applications demonstrates the versatility of Cursor across different domains.  The specific mentions of 'vibe coding', Gemini 2.5, Sonnet integration and prompt management techniques offer valuable insights for other users looking to optimize their workflows. The community feedback provides a realistic assessment of Cursor's strengths and areas for improvement.  It‚Äôs fantastic to see users reporting significant time savings and increased productivity, which is a core value proposition of Cursor. The thread also highlights the power of using Cursor to understand and modify existing codebases, which is a common challenge for developers. This type of real-world usage data is invaluable for understanding the impact of Cursor and identifying potential new features or improvements.","IsRelevant":true},{"Title":"Vibe coding era - Billions of lines of code with millions of bugs","ID":"t3_1ke0uwl","Summary":"This post expresses concern about the increasing use of AI-assisted coding tools ('vibe coding') and the potential for a surge in buggy code due to developers lacking deep understanding of the generated code. The author observes many developers struggling with debugging and fears a future where vast amounts of unmaintainable code are created. The discussion centers around whether AI tools are best suited for experienced developers who can validate and test the output, or if they're enabling less skilled individuals to produce flawed code. Several commenters share their experiences using Cursor (and other AI tools) for prototyping, large-scale projects, and legacy code refactoring. The consensus seems to be that AI is a powerful tool but requires careful oversight, testing, and understanding of the underlying code.","CommentSummary":"The comments are overwhelmingly pragmatic. Many users report successful integration of AI tools like Cursor into their workflows, but emphasize the importance of strong foundational coding skills for validation and debugging. There's a recurring theme that AI is best used as an *accelerator* for experienced developers, not a replacement for them. Several commenters highlight the need for TDD (Test-Driven Development), code reviews, and interactive debugging to mitigate risks. A few users express frustration with the perception that AI should magically produce perfect code, and point out that humans have always been a major source of bugs. There's also discussion about the suitability of AI for prototyping versus production code, and the importance of understanding the context and limitations of the generated output. Some users share specific examples of using AI to reverse engineer legacy code, implement new features, and improve existing systems.","Link":"https://www.reddit.com/r/cursor/comments/1ke0uwl/vibe_coding_era_billions_of_lines_of_code_with/","Relevance":"This post is highly relevant to Cursor AI IDE users. It directly addresses the core value proposition of tools like Cursor ‚Äì accelerating development through AI assistance. The discussion highlights both the potential benefits and risks associated with using AI-generated code, emphasizing the importance of skills like debugging, testing, and understanding the underlying logic. The comments provide valuable real-world examples of how developers are integrating Cursor into their workflows, and offer practical advice for mitigating risks. The post also raises important questions about the future of software development and the role of AI in maintaining code quality. The discussion around TDD, code reviews, and interactive debugging are all directly applicable to using Cursor effectively. The post also touches on the importance of understanding the context and limitations of AI-generated code, which is a crucial skill for any developer using these tools. The fact that multiple users specifically mention their positive experiences with Cursor is a strong indicator of its value and relevance to the community.","IsRelevant":true}],"persona":"Cursor"}